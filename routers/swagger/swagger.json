{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/acta_inicio/": {
            "get": {
                "tags": [
                    "acta_inicio"
                ],
                "description": "get ActaInicio",
                "operationId": "ActaInicioController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ActaInicio"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "acta_inicio"
                ],
                "description": "create ActaInicio",
                "operationId": "ActaInicioController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ActaInicio content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActaInicio"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ActaInicio"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/acta_inicio/{id}": {
            "get": {
                "tags": [
                    "acta_inicio"
                ],
                "description": "get ActaInicio by id",
                "operationId": "ActaInicioController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ActaInicio"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "acta_inicio"
                ],
                "description": "update the ActaInicio",
                "operationId": "ActaInicioController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ActaInicio content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ActaInicio"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ActaInicio"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "acta_inicio"
                ],
                "description": "delete the ActaInicio",
                "operationId": "ActaInicioController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/argo_ordenadores/": {
            "get": {
                "tags": [
                    "argo_ordenadores"
                ],
                "description": "get ArgoOrdenadores",
                "operationId": "ArgoOrdenadoresController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ArgoOrdenadores"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "argo_ordenadores"
                ],
                "description": "create ArgoOrdenadores",
                "operationId": "ArgoOrdenadoresController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ArgoOrdenadores content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ArgoOrdenadores"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ArgoOrdenadores"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/argo_ordenadores/{id}": {
            "get": {
                "tags": [
                    "argo_ordenadores"
                ],
                "description": "get ArgoOrdenadores by id",
                "operationId": "ArgoOrdenadoresController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ArgoOrdenadores"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "argo_ordenadores"
                ],
                "description": "update the ArgoOrdenadores",
                "operationId": "ArgoOrdenadoresController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ArgoOrdenadores content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ArgoOrdenadores"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ArgoOrdenadores"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "argo_ordenadores"
                ],
                "description": "delete the ArgoOrdenadores",
                "operationId": "ArgoOrdenadoresController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/banco/": {
            "get": {
                "tags": [
                    "banco"
                ],
                "description": "get Banco",
                "operationId": "BancoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Banco"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "banco"
                ],
                "description": "create Banco",
                "operationId": "BancoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Banco content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Banco"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Banco"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/banco/{id}": {
            "get": {
                "tags": [
                    "banco"
                ],
                "description": "get Banco by id",
                "operationId": "BancoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Banco"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "banco"
                ],
                "description": "update the Banco",
                "operationId": "BancoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Banco content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Banco"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Banco"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "banco"
                ],
                "description": "delete the Banco",
                "operationId": "BancoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/beneficiario/": {
            "get": {
                "tags": [
                    "beneficiario"
                ],
                "description": "get Beneficiario",
                "operationId": "BeneficiarioController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Beneficiario"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "beneficiario"
                ],
                "description": "create Beneficiario",
                "operationId": "BeneficiarioController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Beneficiario content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Beneficiario"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Beneficiario"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/beneficiario/{id}": {
            "get": {
                "tags": [
                    "beneficiario"
                ],
                "description": "get Beneficiario by id",
                "operationId": "BeneficiarioController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Beneficiario"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "beneficiario"
                ],
                "description": "update the Beneficiario",
                "operationId": "BeneficiarioController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Beneficiario content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Beneficiario"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Beneficiario"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "beneficiario"
                ],
                "description": "delete the Beneficiario",
                "operationId": "BeneficiarioController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/cargo/": {
            "get": {
                "tags": [
                    "cargo"
                ],
                "description": "get Cargo",
                "operationId": "CargoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Cargo"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "cargo"
                ],
                "description": "create Cargo",
                "operationId": "CargoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Cargo content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Cargo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Cargo"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/cargo/{id}": {
            "get": {
                "tags": [
                    "cargo"
                ],
                "description": "get Cargo by id",
                "operationId": "CargoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Cargo"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "cargo"
                ],
                "description": "update the Cargo",
                "operationId": "CargoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Cargo content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Cargo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Cargo"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "cargo"
                ],
                "description": "delete the Cargo",
                "operationId": "CargoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/categoria_beneficiario/": {
            "get": {
                "tags": [
                    "categoria_beneficiario"
                ],
                "description": "get CategoriaBeneficiario",
                "operationId": "CategoriaBeneficiarioController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.CategoriaBeneficiario"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "categoria_beneficiario"
                ],
                "description": "create CategoriaBeneficiario",
                "operationId": "CategoriaBeneficiarioController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for CategoriaBeneficiario content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CategoriaBeneficiario"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.CategoriaBeneficiario"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/categoria_beneficiario/{id}": {
            "get": {
                "tags": [
                    "categoria_beneficiario"
                ],
                "description": "get CategoriaBeneficiario by id",
                "operationId": "CategoriaBeneficiarioController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.CategoriaBeneficiario"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "categoria_beneficiario"
                ],
                "description": "update the CategoriaBeneficiario",
                "operationId": "CategoriaBeneficiarioController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for CategoriaBeneficiario content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CategoriaBeneficiario"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.CategoriaBeneficiario"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "categoria_beneficiario"
                ],
                "description": "delete the CategoriaBeneficiario",
                "operationId": "CategoriaBeneficiarioController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/ciudad/": {
            "get": {
                "tags": [
                    "ciudad"
                ],
                "description": "get Ciudad",
                "operationId": "CiudadController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Ciudad"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "ciudad"
                ],
                "description": "create Ciudad",
                "operationId": "CiudadController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Ciudad content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Ciudad"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Ciudad"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/ciudad/{id}": {
            "get": {
                "tags": [
                    "ciudad"
                ],
                "description": "get Ciudad by id",
                "operationId": "CiudadController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Ciudad"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "ciudad"
                ],
                "description": "update the Ciudad",
                "operationId": "CiudadController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Ciudad content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Ciudad"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Ciudad"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ciudad"
                ],
                "description": "delete the Ciudad",
                "operationId": "CiudadController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/concepto_nomina/": {
            "get": {
                "tags": [
                    "concepto_nomina"
                ],
                "description": "get ConceptoNomina",
                "operationId": "ConceptoNominaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "concepto_nomina"
                ],
                "description": "create ConceptoNomina",
                "operationId": "ConceptoNominaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ConceptoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNomina"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ConceptoNomina"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/concepto_nomina/{id}": {
            "get": {
                "tags": [
                    "concepto_nomina"
                ],
                "description": "get ConceptoNomina by id",
                "operationId": "ConceptoNominaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "concepto_nomina"
                ],
                "description": "update the ConceptoNomina",
                "operationId": "ConceptoNominaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ConceptoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNomina"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "concepto_nomina"
                ],
                "description": "delete the ConceptoNomina",
                "operationId": "ConceptoNominaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/concepto_nomina_por_persona/": {
            "get": {
                "tags": [
                    "concepto_nomina_por_persona"
                ],
                "description": "get ConceptoNominaPorPersona",
                "operationId": "ConceptoNominaPorPersonaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNominaPorPersona"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "concepto_nomina_por_persona"
                ],
                "description": "create ConceptoNominaPorPersona",
                "operationId": "ConceptoNominaPorPersonaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ConceptoNominaPorPersona content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNominaPorPersona"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ConceptoNominaPorPersona"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/concepto_nomina_por_persona/TrActualizarIncapacidadProrroga": {
            "post": {
                "tags": [
                    "concepto_nomina_por_persona"
                ],
                "description": "actualiza el estado de una incapacidad y registra una nueva",
                "operationId": "ConceptoNominaPorPersonaController.TrActualizarIncapacidadProrroga",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TrConceptosNomPersona content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TrConceptosNomPersona"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{alert} models.Alerta"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/concepto_nomina_por_persona/TrConceptosPorPersona": {
            "post": {
                "tags": [
                    "concepto_nomina_por_persona"
                ],
                "description": "create ConceptoNominaPorPersona",
                "operationId": "ConceptoNominaPorPersonaController.TrConceptosPorPersona",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TrConceptosNomPersona content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TrConceptosNomPersona"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{alert} models.Alerta"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/concepto_nomina_por_persona/TrEliminarIncapacidadProrroga": {
            "post": {
                "tags": [
                    "concepto_nomina_por_persona"
                ],
                "description": "Elimina un registro de prorroga de incapacidad",
                "operationId": "ConceptoNominaPorPersonaController.TrEliminarIncapacidadProrroga",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TrConceptosNomPersona content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TrConceptosNomPersona"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{alert} models.Alerta"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/concepto_nomina_por_persona/{id}": {
            "get": {
                "tags": [
                    "concepto_nomina_por_persona"
                ],
                "description": "get ConceptoNominaPorPersona by id",
                "operationId": "ConceptoNominaPorPersonaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNominaPorPersona"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "concepto_nomina_por_persona"
                ],
                "description": "update the ConceptoNominaPorPersona",
                "operationId": "ConceptoNominaPorPersonaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ConceptoNominaPorPersona content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNominaPorPersona"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ConceptoNominaPorPersona"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "concepto_nomina_por_persona"
                ],
                "description": "delete the ConceptoNominaPorPersona",
                "operationId": "ConceptoNominaPorPersonaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/contrato_general/": {
            "get": {
                "tags": [
                    "contrato_general"
                ],
                "description": "get ContratoGeneral",
                "operationId": "ContratoGeneralController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ContratoGeneral"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "contrato_general"
                ],
                "description": "create ContratoGeneral",
                "operationId": "ContratoGeneralController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ContratoGeneral content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContratoGeneral"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ContratoGeneral"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/contrato_general/{id}": {
            "get": {
                "tags": [
                    "contrato_general"
                ],
                "description": "get ContratoGeneral by id",
                "operationId": "ContratoGeneralController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ContratoGeneral"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "contrato_general"
                ],
                "description": "update the ContratoGeneral",
                "operationId": "ContratoGeneralController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ContratoGeneral content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ContratoGeneral"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ContratoGeneral"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "contrato_general"
                ],
                "description": "delete the ContratoGeneral",
                "operationId": "ContratoGeneralController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/departamento/": {
            "get": {
                "tags": [
                    "departamento"
                ],
                "description": "get Departamento",
                "operationId": "DepartamentoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Departamento"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "departamento"
                ],
                "description": "create Departamento",
                "operationId": "DepartamentoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Departamento content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Departamento"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Departamento"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/departamento/{id}": {
            "get": {
                "tags": [
                    "departamento"
                ],
                "description": "get Departamento by id",
                "operationId": "DepartamentoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Departamento"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "departamento"
                ],
                "description": "update the Departamento",
                "operationId": "DepartamentoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Departamento content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Departamento"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Departamento"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "departamento"
                ],
                "description": "delete the Departamento",
                "operationId": "DepartamentoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/detalle_preliquidacion/": {
            "get": {
                "tags": [
                    "detalle_preliquidacion"
                ],
                "description": "get DetallePreliquidacion",
                "operationId": "DetallePreliquidacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.DetallePreliquidacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "detalle_preliquidacion"
                ],
                "description": "create DetallePreliquidacion",
                "operationId": "DetallePreliquidacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for DetallePreliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DetallePreliquidacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.DetallePreliquidacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/detalle_preliquidacion/get_personas_pago_pendiente": {
            "get": {
                "tags": [
                    "detalle_preliquidacion"
                ],
                "description": "obtener contrato y vigencia agrupados de personas que tengan pagos pendientes en meses anteriores",
                "operationId": "DetallePreliquidacionController.GetPersonasPagosPendientes",
                "parameters": [
                    {
                        "in": "query",
                        "name": "idNomina",
                        "description": "nomina a listar",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.DetallePreliquidacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            }
        },
        "/detalle_preliquidacion/{id}": {
            "get": {
                "tags": [
                    "detalle_preliquidacion"
                ],
                "description": "get DetallePreliquidacion by id",
                "operationId": "DetallePreliquidacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.DetallePreliquidacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "detalle_preliquidacion"
                ],
                "description": "update the DetallePreliquidacion",
                "operationId": "DetallePreliquidacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for DetallePreliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DetallePreliquidacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.DetallePreliquidacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "detalle_preliquidacion"
                ],
                "description": "delete the DetallePreliquidacion",
                "operationId": "DetallePreliquidacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/docente_cargo/": {
            "post": {
                "tags": [
                    "docente_cargo"
                ],
                "description": "create Consultar asignación básica según cargo",
                "operationId": "DocenteCargoController.ConsultarAsignacionBasica",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for models.Docente_x_Cargo",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Docente_x_Cargo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/.Docente_x_Cargo"
                            }
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/docente_cargo/consultarCedulaDocente/": {
            "post": {
                "tags": [
                    "docente_cargo"
                ],
                "description": "create Consultar cédula del docente",
                "operationId": "DocenteCargoController.ConsultarCedulaDocente",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body string",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/.CedulaDocente"
                            }
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/estado_civil/": {
            "get": {
                "tags": [
                    "estado_civil"
                ],
                "description": "get EstadoCivil",
                "operationId": "EstadoCivilController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "estado_civil"
                ],
                "description": "create EstadoCivil",
                "operationId": "EstadoCivilController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoCivil content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.EstadoCivil"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/estado_civil/{id}": {
            "get": {
                "tags": [
                    "estado_civil"
                ],
                "description": "get EstadoCivil by id",
                "operationId": "EstadoCivilController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "estado_civil"
                ],
                "description": "update the EstadoCivil",
                "operationId": "EstadoCivilController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoCivil content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoCivil"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "estado_civil"
                ],
                "description": "delete the EstadoCivil",
                "operationId": "EstadoCivilController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/estado_concepto_nomina/": {
            "get": {
                "tags": [
                    "estado_concepto_nomina"
                ],
                "description": "get EstadoConceptoNomina",
                "operationId": "EstadoConceptoNominaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "estado_concepto_nomina"
                ],
                "description": "create EstadoConceptoNomina",
                "operationId": "EstadoConceptoNominaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoConceptoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoConceptoNomina"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.EstadoConceptoNomina"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/estado_concepto_nomina/{id}": {
            "get": {
                "tags": [
                    "estado_concepto_nomina"
                ],
                "description": "get EstadoConceptoNomina by id",
                "operationId": "EstadoConceptoNominaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "estado_concepto_nomina"
                ],
                "description": "update the EstadoConceptoNomina",
                "operationId": "EstadoConceptoNominaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoConceptoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoConceptoNomina"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "estado_concepto_nomina"
                ],
                "description": "delete the EstadoConceptoNomina",
                "operationId": "EstadoConceptoNominaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/estado_disponibilidad/": {
            "get": {
                "tags": [
                    "estado_disponibilidad"
                ],
                "description": "get EstadoDisponibilidad",
                "operationId": "EstadoDisponibilidadController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoDisponibilidad"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "estado_disponibilidad"
                ],
                "description": "create EstadoDisponibilidad",
                "operationId": "EstadoDisponibilidadController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoDisponibilidad content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoDisponibilidad"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.EstadoDisponibilidad"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/estado_disponibilidad/{id}": {
            "get": {
                "tags": [
                    "estado_disponibilidad"
                ],
                "description": "get EstadoDisponibilidad by id",
                "operationId": "EstadoDisponibilidadController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoDisponibilidad"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "estado_disponibilidad"
                ],
                "description": "update the EstadoDisponibilidad",
                "operationId": "EstadoDisponibilidadController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoDisponibilidad content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoDisponibilidad"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoDisponibilidad"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "estado_disponibilidad"
                ],
                "description": "delete the EstadoDisponibilidad",
                "operationId": "EstadoDisponibilidadController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/estado_preliquidacion/": {
            "get": {
                "tags": [
                    "estado_preliquidacion"
                ],
                "description": "get EstadoPreliquidacion",
                "operationId": "EstadoPreliquidacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoPreliquidacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "estado_preliquidacion"
                ],
                "description": "create EstadoPreliquidacion",
                "operationId": "EstadoPreliquidacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoPreliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoPreliquidacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.EstadoPreliquidacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/estado_preliquidacion/{id}": {
            "get": {
                "tags": [
                    "estado_preliquidacion"
                ],
                "description": "get EstadoPreliquidacion by id",
                "operationId": "EstadoPreliquidacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoPreliquidacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "estado_preliquidacion"
                ],
                "description": "update the EstadoPreliquidacion",
                "operationId": "EstadoPreliquidacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for EstadoPreliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EstadoPreliquidacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.EstadoPreliquidacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "estado_preliquidacion"
                ],
                "description": "delete the EstadoPreliquidacion",
                "operationId": "EstadoPreliquidacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/funcionario_cargo/get_asignacion_basica": {
            "post": {
                "tags": [
                    "funcionario_cargo"
                ],
                "description": "create Consultar asignación básica según cargo",
                "operationId": "FuncionarioCargoController.ConsultarAsignacionBasicaFuncionario",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for models..Funcionario_x_Cargo",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Funcionario_x_Cargo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/.Docente_x_Cargo"
                            }
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/funcionario_primatec/": {
            "post": {
                "tags": [
                    "funcionario_primatec"
                ],
                "description": "Consulta prima técnica del funcionario",
                "operationId": "FuncionarioPritecController.ConsultarPrimaTecnica",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body int",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/funcionario_proveedor/get_funcionarios_planta": {
            "get": {
                "tags": [
                    "funcionario_proveedor"
                ],
                "description": "Retorna los contratos de planta",
                "operationId": "FuncionarioProveedorController.GetIdProveedorXFuncionario",
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Funcionario_x_Proveedor"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/informacion_pensionado/": {
            "get": {
                "tags": [
                    "informacion_pensionado"
                ],
                "description": "get InformacionPensionado",
                "operationId": "InformacionPensionadoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.InformacionPensionado"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            }
        },
        "/informacion_pensionado/{id}": {
            "get": {
                "tags": [
                    "informacion_pensionado"
                ],
                "description": "get InformacionPensionado by id",
                "operationId": "InformacionPensionadoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.InformacionPensionado"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "informacion_pensionado"
                ],
                "description": "update the InformacionPensionado",
                "operationId": "InformacionPensionadoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for InformacionPensionado content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InformacionPensionado"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.InformacionPensionado"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "informacion_pensionado"
                ],
                "description": "delete the InformacionPensionado",
                "operationId": "InformacionPensionadoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/informacion_proveedor/": {
            "get": {
                "tags": [
                    "informacion_proveedor"
                ],
                "description": "get InformacionProveedor",
                "operationId": "InformacionProveedorController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.InformacionProveedor"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "informacion_proveedor"
                ],
                "description": "create InformacionProveedor",
                "operationId": "InformacionProveedorController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for InformacionProveedor content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InformacionProveedor"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.InformacionProveedor"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/informacion_proveedor/{id}": {
            "get": {
                "tags": [
                    "informacion_proveedor"
                ],
                "description": "get InformacionProveedor by id",
                "operationId": "InformacionProveedorController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.InformacionProveedor"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "informacion_proveedor"
                ],
                "description": "update the InformacionProveedor",
                "operationId": "InformacionProveedorController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for InformacionProveedor content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InformacionProveedor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.InformacionProveedor"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "informacion_proveedor"
                ],
                "description": "delete the InformacionProveedor",
                "operationId": "InformacionProveedorController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/lugar_ejecucion/": {
            "get": {
                "tags": [
                    "lugar_ejecucion"
                ],
                "description": "get LugarEjecucion",
                "operationId": "LugarEjecucionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.LugarEjecucion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "lugar_ejecucion"
                ],
                "description": "create LugarEjecucion",
                "operationId": "LugarEjecucionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for LugarEjecucion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LugarEjecucion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.LugarEjecucion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/lugar_ejecucion/{id}": {
            "get": {
                "tags": [
                    "lugar_ejecucion"
                ],
                "description": "get LugarEjecucion by id",
                "operationId": "LugarEjecucionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.LugarEjecucion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "lugar_ejecucion"
                ],
                "description": "update the LugarEjecucion",
                "operationId": "LugarEjecucionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for LugarEjecucion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LugarEjecucion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.LugarEjecucion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "lugar_ejecucion"
                ],
                "description": "delete the LugarEjecucion",
                "operationId": "LugarEjecucionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/naturaleza_concepto_nomina/": {
            "get": {
                "tags": [
                    "naturaleza_concepto_nomina"
                ],
                "description": "get NaturalezaConceptoNomina",
                "operationId": "NaturalezaConceptoNominaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.NaturalezaConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "naturaleza_concepto_nomina"
                ],
                "description": "create NaturalezaConceptoNomina",
                "operationId": "NaturalezaConceptoNominaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for NaturalezaConceptoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NaturalezaConceptoNomina"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.NaturalezaConceptoNomina"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/naturaleza_concepto_nomina/{id}": {
            "get": {
                "tags": [
                    "naturaleza_concepto_nomina"
                ],
                "description": "get NaturalezaConceptoNomina by id",
                "operationId": "NaturalezaConceptoNominaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.NaturalezaConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "naturaleza_concepto_nomina"
                ],
                "description": "update the NaturalezaConceptoNomina",
                "operationId": "NaturalezaConceptoNominaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for NaturalezaConceptoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NaturalezaConceptoNomina"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.NaturalezaConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "naturaleza_concepto_nomina"
                ],
                "description": "delete the NaturalezaConceptoNomina",
                "operationId": "NaturalezaConceptoNominaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/nomina/": {
            "get": {
                "tags": [
                    "nomina"
                ],
                "description": "get Nomina",
                "operationId": "NominaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Nomina"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "nomina"
                ],
                "description": "create Nomina",
                "operationId": "NominaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Nomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Nomina"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Nomina"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/nomina/{id}": {
            "get": {
                "tags": [
                    "nomina"
                ],
                "description": "get Nomina by id",
                "operationId": "NominaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Nomina"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "nomina"
                ],
                "description": "update the Nomina",
                "operationId": "NominaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Nomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Nomina"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Nomina"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "nomina"
                ],
                "description": "delete the Nomina",
                "operationId": "NominaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/pais/": {
            "get": {
                "tags": [
                    "pais"
                ],
                "description": "get Pais",
                "operationId": "PaisController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Pais"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "pais"
                ],
                "description": "create Pais",
                "operationId": "PaisController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Pais content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Pais"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Pais"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/pais/{id}": {
            "get": {
                "tags": [
                    "pais"
                ],
                "description": "get Pais by id",
                "operationId": "PaisController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Pais"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "pais"
                ],
                "description": "update the Pais",
                "operationId": "PaisController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Pais content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Pais"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Pais"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "pais"
                ],
                "description": "delete the Pais",
                "operationId": "PaisController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/parametro_estandar/": {
            "get": {
                "tags": [
                    "parametro_estandar"
                ],
                "description": "get ParametroEstandar",
                "operationId": "ParametroEstandarController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParametroEstandar"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "parametro_estandar"
                ],
                "description": "create ParametroEstandar",
                "operationId": "ParametroEstandarController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ParametroEstandar content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ParametroEstandar"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ParametroEstandar"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/parametro_estandar/{id}": {
            "get": {
                "tags": [
                    "parametro_estandar"
                ],
                "description": "get ParametroEstandar by id",
                "operationId": "ParametroEstandarController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParametroEstandar"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "parametro_estandar"
                ],
                "description": "update the ParametroEstandar",
                "operationId": "ParametroEstandarController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ParametroEstandar content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ParametroEstandar"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ParametroEstandar"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "parametro_estandar"
                ],
                "description": "delete the ParametroEstandar",
                "operationId": "ParametroEstandarController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/parametros/": {
            "get": {
                "tags": [
                    "parametros"
                ],
                "description": "get Parametros",
                "operationId": "ParametrosController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Parametros"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "parametros"
                ],
                "description": "create Parametros",
                "operationId": "ParametrosController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Parametros content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Parametros"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Parametros"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/parametros/{id}": {
            "get": {
                "tags": [
                    "parametros"
                ],
                "description": "get Parametros by id",
                "operationId": "ParametrosController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Parametros"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "parametros"
                ],
                "description": "update the Parametros",
                "operationId": "ParametrosController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Parametros content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Parametros"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Parametros"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "parametros"
                ],
                "description": "delete the Parametros",
                "operationId": "ParametrosController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/porcentaje_prima_tecnica/": {
            "get": {
                "tags": [
                    "porcentaje_prima_tecnica"
                ],
                "description": "get PorcentajePrimaTecnica",
                "operationId": "PorcentajePrimaTecnicaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PorcentajePrimaTecnica"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "porcentaje_prima_tecnica"
                ],
                "description": "create PorcentajePrimaTecnica",
                "operationId": "PorcentajePrimaTecnicaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PorcentajePrimaTecnica content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PorcentajePrimaTecnica"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.PorcentajePrimaTecnica"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/porcentaje_prima_tecnica/{id}": {
            "get": {
                "tags": [
                    "porcentaje_prima_tecnica"
                ],
                "description": "get PorcentajePrimaTecnica by id",
                "operationId": "PorcentajePrimaTecnicaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PorcentajePrimaTecnica"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "porcentaje_prima_tecnica"
                ],
                "description": "update the PorcentajePrimaTecnica",
                "operationId": "PorcentajePrimaTecnicaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PorcentajePrimaTecnica content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PorcentajePrimaTecnica"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PorcentajePrimaTecnica"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "porcentaje_prima_tecnica"
                ],
                "description": "delete the PorcentajePrimaTecnica",
                "operationId": "PorcentajePrimaTecnicaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/preliquidacion/": {
            "get": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "get Preliquidacion",
                "operationId": "PreliquidacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Preliquidacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "create Preliquidacion",
                "operationId": "PreliquidacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Preliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Preliquidacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Preliquidacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/preliquidacion/contratos_x_preliquidacion": {
            "get": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "Agrupa los contratos de una preliquidacion segun mes, año y nomina para preliquidaicones en estado OP",
                "operationId": "PreliquidacionController.Contratos_x_preliquidacion",
                "parameters": [
                    {
                        "in": "query",
                        "name": "idNomina",
                        "description": "nomina a listar",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mesLiquidacion",
                        "description": "mes de la liquidacion a listar",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "anioLiquidacion",
                        "description": "anio de la liquidacion a listar",
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Preliquidacion_x_contratos"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/preliquidacion/contratos_x_preliquidacion_cerrada": {
            "get": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "Agrupa los contratos de una preliquidacion segun mes, año y nomina para preliquidaicones en estado CERRADA",
                "operationId": "PreliquidacionController.Contratos_x_preliquidacion_cerrada",
                "parameters": [
                    {
                        "in": "query",
                        "name": "idNomina",
                        "description": "nomina a listar",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mesLiquidacion",
                        "description": "mes de la liquidacion a listar",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "anioLiquidacion",
                        "description": "anio de la liquidacion a listar",
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Preliquidacion_x_contratos"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/preliquidacion/personas_x_preliquidacion/": {
            "post": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "create Personas_x_preliquidacion",
                "operationId": "PreliquidacionController.Personas_x_preliquidacion",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Preliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Preliquidacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PersonasPreliquidacion"
                            }
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/preliquidacion/resumen/": {
            "post": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "create Resumen",
                "operationId": "PreliquidacionController.Resumen",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Preliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Preliquidacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.InformePreliquidacion"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/preliquidacion/totales_x_preliq": {
            "get": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "Retorna los totales para los descuentos de salud, pension y fondo de solidaridad segun el tipo de nomina, el mes y el año",
                "operationId": "PreliquidacionController.Totales_ss_x_preliquidacion",
                "parameters": [
                    {
                        "in": "query",
                        "name": "idNomina",
                        "description": "nomina a listar",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mesLiquidacion",
                        "description": "mes de la liquidacion a listar",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "anioLiquidacion",
                        "description": "anio de la liquidacion a listar",
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Totales_x_preliq"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/preliquidacion/{id}": {
            "get": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "get Preliquidacion by id",
                "operationId": "PreliquidacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Preliquidacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "update the Preliquidacion",
                "operationId": "PreliquidacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Preliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Preliquidacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Preliquidacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "preliquidacion"
                ],
                "description": "delete the Preliquidacion",
                "operationId": "PreliquidacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/relacion_parametro/": {
            "get": {
                "tags": [
                    "relacion_parametro"
                ],
                "description": "get RelacionParametro",
                "operationId": "RelacionParametroController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RelacionParametro"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "relacion_parametro"
                ],
                "description": "create RelacionParametro",
                "operationId": "RelacionParametroController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RelacionParametro content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RelacionParametro"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.RelacionParametro"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/relacion_parametro/{id}": {
            "get": {
                "tags": [
                    "relacion_parametro"
                ],
                "description": "get RelacionParametro by id",
                "operationId": "RelacionParametroController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RelacionParametro"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "relacion_parametro"
                ],
                "description": "update the RelacionParametro",
                "operationId": "RelacionParametroController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RelacionParametro content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RelacionParametro"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RelacionParametro"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "relacion_parametro"
                ],
                "description": "delete the RelacionParametro",
                "operationId": "RelacionParametroController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/resolucion/": {
            "get": {
                "tags": [
                    "resolucion"
                ],
                "description": "get Resolucion",
                "operationId": "ResolucionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Resolucion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "resolucion"
                ],
                "description": "create Resolucion",
                "operationId": "ResolucionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Resolucion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Resolucion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Resolucion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/resolucion/{id}": {
            "get": {
                "tags": [
                    "resolucion"
                ],
                "description": "get Resolucion by id",
                "operationId": "ResolucionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Resolucion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "resolucion"
                ],
                "description": "update the Resolucion",
                "operationId": "ResolucionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Resolucion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Resolucion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Resolucion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "resolucion"
                ],
                "description": "delete the Resolucion",
                "operationId": "ResolucionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/supervisor_contrato/": {
            "get": {
                "tags": [
                    "supervisor_contrato"
                ],
                "description": "get SupervisorContrato",
                "operationId": "SupervisorContratoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SupervisorContrato"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "supervisor_contrato"
                ],
                "description": "create SupervisorContrato",
                "operationId": "SupervisorContratoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SupervisorContrato content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SupervisorContrato"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.SupervisorContrato"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/supervisor_contrato/{id}": {
            "get": {
                "tags": [
                    "supervisor_contrato"
                ],
                "description": "get SupervisorContrato by id",
                "operationId": "SupervisorContratoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SupervisorContrato"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "supervisor_contrato"
                ],
                "description": "update the SupervisorContrato",
                "operationId": "SupervisorContratoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SupervisorContrato content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SupervisorContrato"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SupervisorContrato"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "supervisor_contrato"
                ],
                "description": "delete the SupervisorContrato",
                "operationId": "SupervisorContratoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/sustituto/": {
            "get": {
                "tags": [
                    "sustituto"
                ],
                "description": "get Sustituto",
                "operationId": "SustitutoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Sustituto"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "sustituto"
                ],
                "description": "create Sustituto",
                "operationId": "SustitutoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Sustituto content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Sustituto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Sustituto"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/sustituto/{id}": {
            "get": {
                "tags": [
                    "sustituto"
                ],
                "description": "get Sustituto by id",
                "operationId": "SustitutoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Sustituto"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "sustituto"
                ],
                "description": "update the Sustituto",
                "operationId": "SustitutoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Sustituto content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Sustituto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Sustituto"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "sustituto"
                ],
                "description": "delete the Sustituto",
                "operationId": "SustitutoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_concepto_nomina/": {
            "get": {
                "tags": [
                    "tipo_concepto_nomina"
                ],
                "description": "get TipoConceptoNomina",
                "operationId": "TipoConceptoNominaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_concepto_nomina"
                ],
                "description": "create TipoConceptoNomina",
                "operationId": "TipoConceptoNominaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoConceptoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoConceptoNomina"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoConceptoNomina"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_concepto_nomina/{id}": {
            "get": {
                "tags": [
                    "tipo_concepto_nomina"
                ],
                "description": "get TipoConceptoNomina by id",
                "operationId": "TipoConceptoNominaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_concepto_nomina"
                ],
                "description": "update the TipoConceptoNomina",
                "operationId": "TipoConceptoNominaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoConceptoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoConceptoNomina"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoConceptoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_concepto_nomina"
                ],
                "description": "delete the TipoConceptoNomina",
                "operationId": "TipoConceptoNominaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_contrato/": {
            "get": {
                "tags": [
                    "tipo_contrato"
                ],
                "description": "get TipoContrato",
                "operationId": "TipoContratoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoContrato"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_contrato"
                ],
                "description": "create TipoContrato",
                "operationId": "TipoContratoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoContrato content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoContrato"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoContrato"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_contrato/{id}": {
            "get": {
                "tags": [
                    "tipo_contrato"
                ],
                "description": "get TipoContrato by id",
                "operationId": "TipoContratoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoContrato"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_contrato"
                ],
                "description": "update the TipoContrato",
                "operationId": "TipoContratoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoContrato content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoContrato"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoContrato"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_contrato"
                ],
                "description": "delete the TipoContrato",
                "operationId": "TipoContratoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_nomina/": {
            "get": {
                "tags": [
                    "tipo_nomina"
                ],
                "description": "get TipoNomina",
                "operationId": "TipoNominaController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoNomina"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_nomina"
                ],
                "description": "create TipoNomina",
                "operationId": "TipoNominaController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoNomina"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoNomina"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_nomina/{id}": {
            "get": {
                "tags": [
                    "tipo_nomina"
                ],
                "description": "get TipoNomina by id",
                "operationId": "TipoNominaController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_nomina"
                ],
                "description": "update the TipoNomina",
                "operationId": "TipoNominaController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoNomina content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoNomina"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoNomina"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_nomina"
                ],
                "description": "delete the TipoNomina",
                "operationId": "TipoNominaController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_pension/": {
            "get": {
                "tags": [
                    "tipo_pension"
                ],
                "description": "get TipoPension",
                "operationId": "TipoPensionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoPension"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_pension"
                ],
                "description": "create TipoPension",
                "operationId": "TipoPensionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoPension content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoPension"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoPension"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_pension/{id}": {
            "get": {
                "tags": [
                    "tipo_pension"
                ],
                "description": "get TipoPension by id",
                "operationId": "TipoPensionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoPension"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_pension"
                ],
                "description": "update the TipoPension",
                "operationId": "TipoPensionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoPension content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoPension"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoPension"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_pension"
                ],
                "description": "delete the TipoPension",
                "operationId": "TipoPensionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_pensionado/": {
            "get": {
                "tags": [
                    "tipo_pensionado"
                ],
                "description": "get TipoPensionado",
                "operationId": "TipoPensionadoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoPensionado"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_pensionado"
                ],
                "description": "create TipoPensionado",
                "operationId": "TipoPensionadoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoPensionado content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoPensionado"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoPensionado"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_pensionado/{id}": {
            "get": {
                "tags": [
                    "tipo_pensionado"
                ],
                "description": "get TipoPensionado by id",
                "operationId": "TipoPensionadoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoPensionado"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_pensionado"
                ],
                "description": "update the TipoPensionado",
                "operationId": "TipoPensionadoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoPensionado content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoPensionado"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoPensionado"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_pensionado"
                ],
                "description": "delete the TipoPensionado",
                "operationId": "TipoPensionadoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/tipo_preliquidacion/": {
            "get": {
                "tags": [
                    "tipo_preliquidacion"
                ],
                "description": "get TipoPreliquidacion",
                "operationId": "TipoPreliquidacionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoPreliquidacion"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tipo_preliquidacion"
                ],
                "description": "create TipoPreliquidacion",
                "operationId": "TipoPreliquidacionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoPreliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoPreliquidacion"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TipoPreliquidacion"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tipo_preliquidacion/{id}": {
            "get": {
                "tags": [
                    "tipo_preliquidacion"
                ],
                "description": "get TipoPreliquidacion by id",
                "operationId": "TipoPreliquidacionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoPreliquidacion"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tipo_preliquidacion"
                ],
                "description": "update the TipoPreliquidacion",
                "operationId": "TipoPreliquidacionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TipoPreliquidacion content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TipoPreliquidacion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TipoPreliquidacion"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tipo_preliquidacion"
                ],
                "description": "delete the TipoPreliquidacion",
                "operationId": "TipoPreliquidacionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/unidad_ejecutora/": {
            "get": {
                "tags": [
                    "unidad_ejecutora"
                ],
                "description": "get UnidadEjecutora",
                "operationId": "UnidadEjecutoraController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UnidadEjecutora"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "unidad_ejecutora"
                ],
                "description": "create UnidadEjecutora",
                "operationId": "UnidadEjecutoraController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UnidadEjecutora content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UnidadEjecutora"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.UnidadEjecutora"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/unidad_ejecutora/{id}": {
            "get": {
                "tags": [
                    "unidad_ejecutora"
                ],
                "description": "get UnidadEjecutora by id",
                "operationId": "UnidadEjecutoraController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UnidadEjecutora"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "unidad_ejecutora"
                ],
                "description": "update the UnidadEjecutora",
                "operationId": "UnidadEjecutoraController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UnidadEjecutora content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UnidadEjecutora"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UnidadEjecutora"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "unidad_ejecutora"
                ],
                "description": "delete the UnidadEjecutora",
                "operationId": "UnidadEjecutoraController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        ".CedulaDocente": {
            "type": "object"
        },
        ".Docente_x_Cargo": {
            "type": "object"
        },
        "models.ActaInicio": {
            "title": "ActaInicio",
            "type": "object",
            "properties": {
                "Descripcion": {
                    "type": "string"
                },
                "FechaFin": {
                    "type": "string",
                    "format": "string"
                },
                "FechaInicio": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumeroContrato": {
                    "type": "string"
                },
                "Usuario": {
                    "type": "string"
                },
                "Vigencia": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.ArgoOrdenadores": {
            "title": "ArgoOrdenadores",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "ORGESTADO": {
                    "type": "string"
                },
                "ORGIDENTIFICACION": {
                    "type": "number",
                    "format": "double"
                },
                "ORGIDENTIFICADOR": {
                    "type": "number",
                    "format": "double"
                },
                "ORGNOMBRE": {
                    "type": "string"
                },
                "ORGORDENADORGASTO": {
                    "type": "string"
                },
                "ORGTIPOORDENADOR": {
                    "type": "string"
                }
            }
        },
        "models.Banco": {
            "title": "Banco",
            "type": "object",
            "properties": {
                "DenominacionBanco": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Estado": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NombreBanco": {
                    "type": "string"
                }
            }
        },
        "models.Beneficiario": {
            "title": "Beneficiario",
            "type": "object",
            "properties": {
                "AuxEstudio": {
                    "type": "string"
                },
                "CategoriaBeneficiario": {
                    "$ref": "#/definitions/models.CategoriaBeneficiario"
                },
                "Estado": {
                    "type": "string"
                },
                "FechaNacBeneficiario": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "InformacionPensionado": {
                    "$ref": "#/definitions/models.InformacionProveedor"
                },
                "InformacionProveedor": {
                    "$ref": "#/definitions/models.InformacionProveedor"
                },
                "SubFamiliar": {
                    "type": "string"
                }
            }
        },
        "models.Cargo": {
            "title": "Cargo",
            "type": "object",
            "properties": {
                "AsignacionBasica": {
                    "type": "number",
                    "format": "double"
                },
                "Estado": {
                    "type": "string"
                },
                "Grado": {
                    "type": "number",
                    "format": "double"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nivel": {
                    "type": "number",
                    "format": "double"
                },
                "Nombre": {
                    "type": "string"
                }
            }
        },
        "models.CategoriaBeneficiario": {
            "title": "CategoriaBeneficiario",
            "type": "object",
            "properties": {
                "DescripcionTipoBeneficiario": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NombreTipoBeneficiario": {
                    "type": "string"
                }
            }
        },
        "models.Ciudad": {
            "title": "Ciudad",
            "type": "object",
            "properties": {
                "AbPais": {
                    "type": "string"
                },
                "Abreviatura": {
                    "type": "string"
                },
                "Departamento": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Estado": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IdDepartamento": {
                    "$ref": "#/definitions/models.Departamento"
                },
                "Latitud": {
                    "type": "number",
                    "format": "double"
                },
                "Longitud": {
                    "type": "number",
                    "format": "double"
                },
                "Nombre": {
                    "type": "string"
                },
                "Poblacion": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.ConceptoNomina": {
            "title": "ConceptoNomina",
            "type": "object",
            "properties": {
                "AliasConcepto": {
                    "type": "string"
                },
                "EstadoConceptoNomina": {
                    "$ref": "#/definitions/models.EstadoConceptoNomina"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NaturalezaConcepto": {
                    "$ref": "#/definitions/models.NaturalezaConceptoNomina"
                },
                "NombreConcepto": {
                    "type": "string"
                },
                "TipoConcepto": {
                    "$ref": "#/definitions/models.TipoConceptoNomina"
                }
            }
        },
        "models.ConceptoNominaPorPersona": {
            "title": "ConceptoNominaPorPersona",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "Concepto": {
                    "$ref": "#/definitions/models.ConceptoNomina"
                },
                "FechaDesde": {
                    "type": "string",
                    "format": "string"
                },
                "FechaHasta": {
                    "type": "string",
                    "format": "string"
                },
                "FechaRegistro": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nomina": {
                    "$ref": "#/definitions/models.Nomina"
                },
                "NumCuotas": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumeroContrato": {
                    "type": "string"
                },
                "Persona": {
                    "type": "integer",
                    "format": "int64"
                },
                "ValorNovedad": {
                    "type": "number",
                    "format": "double"
                },
                "VigenciaContrato": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.ConceptosInforme": {
            "title": "ConceptosInforme",
            "type": "object",
            "properties": {
                "EstadoDisponibilidad": {
                    "type": "integer",
                    "format": "int64"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Naturaleza": {
                    "type": "string"
                },
                "Nombre": {
                    "type": "string"
                },
                "TipoPreliquidacion": {
                    "type": "string"
                },
                "Valor": {
                    "type": "string"
                }
            }
        },
        "models.ContratoGeneral": {
            "title": "ContratoGeneral",
            "type": "object",
            "properties": {
                "ClaseContratista": {
                    "type": "integer",
                    "format": "int64"
                },
                "ClausulaRegistroPresupuestal": {
                    "type": "boolean"
                },
                "Condiciones": {
                    "type": "string"
                },
                "Contratista": {
                    "$ref": "#/definitions/models.InformacionProveedor"
                },
                "Convenio": {
                    "type": "string"
                },
                "DependenciaSolicitante": {
                    "type": "string"
                },
                "DescripcionFormaPago": {
                    "type": "string"
                },
                "Estado": {
                    "type": "boolean"
                },
                "FechaRegistro": {
                    "type": "string",
                    "format": "string"
                },
                "FormaPago": {
                    "$ref": "#/definitions/models.Parametros"
                },
                "Id": {
                    "type": "string"
                },
                "Justificacion": {
                    "type": "string"
                },
                "LugarEjecucion": {
                    "$ref": "#/definitions/models.LugarEjecucion"
                },
                "ModalidadSeleccion": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumeroCdp": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumeroConstancia": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumeroSolicitudNecesidad": {
                    "type": "integer",
                    "format": "int64"
                },
                "ObjetoContrato": {
                    "type": "string"
                },
                "Observaciones": {
                    "type": "string"
                },
                "OrdenadorGasto": {
                    "$ref": "#/definitions/models.ArgoOrdenadores"
                },
                "OrigenPresupueso": {
                    "type": "integer",
                    "format": "int64"
                },
                "OrigenRecursos": {
                    "type": "integer",
                    "format": "int64"
                },
                "PlazoEjecucion": {
                    "type": "integer",
                    "format": "int64"
                },
                "Procedimiento": {
                    "type": "integer",
                    "format": "int64"
                },
                "RegimenContratacion": {
                    "type": "integer",
                    "format": "int64"
                },
                "ResgistroPresupuestal": {
                    "type": "integer",
                    "format": "int64"
                },
                "SedeSolicitante": {
                    "type": "string"
                },
                "Supervisor": {
                    "$ref": "#/definitions/models.SupervisorContrato"
                },
                "TemaGastoInversion": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipoCompromiso": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipoContrato": {
                    "$ref": "#/definitions/models.TipoContrato"
                },
                "TipoControl": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipoGasto": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipoMoneda": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipologiaContrato": {
                    "type": "integer",
                    "format": "int64"
                },
                "UnidadEjecucion": {
                    "$ref": "#/definitions/models.Parametros"
                },
                "UnidadEjecutora": {
                    "$ref": "#/definitions/models.UnidadEjecutora"
                },
                "ValorContrato": {
                    "type": "number",
                    "format": "double"
                },
                "ValorContratoMe": {
                    "type": "number",
                    "format": "double"
                },
                "ValorTasaCambio": {
                    "type": "number",
                    "format": "double"
                },
                "Vigencia": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Contrato_x_Vigencia": {
            "title": "Contrato_x_Vigencia",
            "type": "object",
            "properties": {
                "NumeroContrato": {
                    "type": "string"
                },
                "VigenciaContrato": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Departamento": {
            "title": "Departamento",
            "type": "object",
            "properties": {
                "AbPais": {
                    "type": "string"
                },
                "Abreviatura": {
                    "type": "string"
                },
                "Area": {
                    "type": "integer",
                    "format": "int64"
                },
                "CapitalDepartamento": {
                    "type": "string"
                },
                "DepartamentoCapPais": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Estado": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IdPais": {
                    "$ref": "#/definitions/models.Pais"
                },
                "Nombre": {
                    "type": "string"
                },
                "Poblacion": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.DetallePreliquidacion": {
            "title": "DetallePreliquidacion",
            "type": "object",
            "properties": {
                "Concepto": {
                    "$ref": "#/definitions/models.ConceptoNomina"
                },
                "DiasLiquidados": {
                    "type": "number",
                    "format": "double"
                },
                "EstadoDisponibilidad": {
                    "$ref": "#/definitions/models.EstadoDisponibilidad"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumeroContrato": {
                    "type": "string"
                },
                "Persona": {
                    "type": "integer",
                    "format": "int64"
                },
                "Preliquidacion": {
                    "$ref": "#/definitions/models.Preliquidacion"
                },
                "TipoPreliquidacion": {
                    "$ref": "#/definitions/models.TipoPreliquidacion"
                },
                "ValorCalculado": {
                    "type": "number",
                    "format": "double"
                },
                "VigenciaContrato": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Docente_x_Cargo": {
            "title": "Docente_x_Cargo",
            "type": "object",
            "properties": {
                "Asignacion_basica": {
                    "type": "integer",
                    "format": "int64"
                },
                "Cargo": {
                    "type": "string"
                },
                "FechaFin": {
                    "type": "string",
                    "format": "string"
                },
                "FechaInicio": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Puntos": {
                    "type": "number",
                    "format": "double"
                },
                "Regimen": {
                    "type": "string"
                }
            }
        },
        "models.EstadoCivil": {
            "title": "EstadoCivil",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NombreEstadoCivil": {
                    "type": "string"
                }
            }
        },
        "models.EstadoConceptoNomina": {
            "title": "EstadoConceptoNomina",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.EstadoDisponibilidad": {
            "title": "EstadoDisponibilidad",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.EstadoPreliquidacion": {
            "title": "EstadoPreliquidacion",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.Funcionario_x_Cargo": {
            "title": "Funcionario_x_Cargo",
            "type": "object",
            "properties": {
                "Asignacion_basica": {
                    "type": "integer",
                    "format": "int64"
                },
                "FechaFin": {
                    "type": "string",
                    "format": "string"
                },
                "FechaInicio": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Funcionario_x_Proveedor": {
            "title": "Funcionario_x_Proveedor",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NombreProveedor": {
                    "type": "string"
                },
                "NumDocumento": {
                    "type": "number",
                    "format": "double"
                },
                "NumeroContrato": {
                    "type": "string"
                },
                "VigenciaContrato": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.InformacionPensionado": {
            "title": "InformacionPensionado",
            "type": "object",
            "properties": {
                "Estado": {
                    "type": "string"
                },
                "EstadoCivil": {
                    "$ref": "#/definitions/models.EstadoCivil"
                },
                "EstadoPension": {
                    "type": "string"
                },
                "FechaNacEmpleado": {
                    "type": "string",
                    "format": "string"
                },
                "FechaPension": {
                    "type": "string",
                    "format": "string"
                },
                "FechaRetiro": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "InformacionProveedor": {
                    "type": "integer",
                    "format": "int64"
                },
                "PensionadoEnExterior": {
                    "type": "string"
                },
                "PersonaFallecido": {
                    "type": "string"
                },
                "Resolucion": {
                    "$ref": "#/definitions/models.Resolucion"
                },
                "TipoPension": {
                    "$ref": "#/definitions/models.TipoPension"
                },
                "TipoPensionado": {
                    "type": "integer",
                    "format": "int64"
                },
                "ValorPensionAsignada": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.InformacionProveedor": {
            "title": "InformacionProveedor",
            "type": "object",
            "properties": {
                "Anexorut": {
                    "type": "string"
                },
                "ClasificacionEvaluacion": {
                    "type": "string"
                },
                "Correo": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Direccion": {
                    "type": "string"
                },
                "Estado": {
                    "$ref": "#/definitions/models.ParametroEstandar"
                },
                "FechaRegistro": {
                    "type": "string"
                },
                "FechaUltimaModificacion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IdCiudadContacto": {
                    "$ref": "#/definitions/models.Ciudad"
                },
                "IdEntidadBancaria": {
                    "type": "number",
                    "format": "double"
                },
                "NomAsesor": {
                    "type": "string"
                },
                "NomProveedor": {
                    "type": "string"
                },
                "NumCuentaBancaria": {
                    "type": "string"
                },
                "NumDocumento": {
                    "type": "number",
                    "format": "double"
                },
                "PuntajeEvaluacion": {
                    "type": "number",
                    "format": "double"
                },
                "Puntos": {
                    "type": "number",
                    "format": "double"
                },
                "TelAsesor": {
                    "type": "string"
                },
                "TipoCuentaBancaria": {
                    "type": "string"
                },
                "Tipopersona": {
                    "type": "string"
                },
                "Web": {
                    "type": "string"
                }
            }
        },
        "models.InformePreliquidacion": {
            "title": "InformePreliquidacion",
            "type": "object",
            "properties": {
                "Conceptos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ConceptosInforme"
                    }
                },
                "Disponibilidad": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumeroContrato": {
                    "type": "string"
                },
                "Vigencia": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.LugarEjecucion": {
            "title": "LugarEjecucion",
            "type": "object",
            "properties": {
                "Ciudad": {
                    "type": "number",
                    "format": "double"
                },
                "Dependencia": {
                    "type": "string"
                },
                "Direccion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Sede": {
                    "type": "string"
                }
            }
        },
        "models.NaturalezaConceptoNomina": {
            "title": "NaturalezaConceptoNomina",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.Nomina": {
            "title": "Nomina",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipoNomina": {
                    "$ref": "#/definitions/models.TipoNomina"
                }
            }
        },
        "models.Pais": {
            "title": "Pais",
            "type": "object",
            "properties": {
                "Abreviatura": {
                    "type": "string"
                },
                "AreaPais": {
                    "type": "integer",
                    "format": "int64"
                },
                "CapitalPais": {
                    "type": "string"
                },
                "CodigoPais": {
                    "type": "integer",
                    "format": "int64"
                },
                "Estado": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NombrePais": {
                    "type": "string"
                },
                "PoblacionPais": {
                    "type": "integer",
                    "format": "int64"
                },
                "ProvinciaPais": {
                    "type": "string"
                }
            }
        },
        "models.ParametroEstandar": {
            "title": "ParametroEstandar",
            "type": "object",
            "properties": {
                "ClaseParametro": {
                    "type": "string"
                },
                "DescripcionParametro": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "ValorParametro": {
                    "type": "string"
                }
            }
        },
        "models.Parametros": {
            "title": "Parametros",
            "type": "object",
            "properties": {
                "CodigoContraloria": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "EstadoRegistro": {
                    "type": "boolean"
                },
                "FechaRegistro": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "RelParametro": {
                    "$ref": "#/definitions/models.RelacionParametro"
                }
            }
        },
        "models.PersonasPreliquidacion": {
            "title": "PersonasPreliquidacion",
            "type": "object",
            "properties": {
                "IdPersona": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumeroContrato": {
                    "type": "string"
                },
                "VigenciaContrato": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.PorcentajePrimaTecnica": {
            "title": "PorcentajePrimaTecnica",
            "type": "object",
            "properties": {
                "EstadoPorcentaje": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IdProveedor": {
                    "$ref": "#/definitions/models.InformacionProveedor"
                },
                "ValorPorcentaje": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Preliquidacion": {
            "title": "Preliquidacion",
            "type": "object",
            "properties": {
                "Ano": {
                    "type": "integer",
                    "format": "int64"
                },
                "Descripcion": {
                    "type": "string"
                },
                "EstadoPreliquidacion": {
                    "$ref": "#/definitions/models.EstadoPreliquidacion"
                },
                "FechaRegistro": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Mes": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nomina": {
                    "$ref": "#/definitions/models.Nomina"
                }
            }
        },
        "models.Preliquidacion_x_contratos": {
            "title": "Preliquidacion_x_contratos",
            "type": "object",
            "properties": {
                "Contratos_por_preliq": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Contrato_x_Vigencia"
                    }
                },
                "Id_Preliq": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre_tipo_nomina": {
                    "type": "string"
                }
            }
        },
        "models.RelacionParametro": {
            "title": "RelacionParametro",
            "type": "object",
            "properties": {
                "Descripcion": {
                    "type": "string"
                },
                "EstadoRegistro": {
                    "type": "boolean"
                },
                "FechaRegistro": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Resolucion": {
            "title": "Resolucion",
            "type": "object",
            "properties": {
                "FechaEmisionResolucionPensionado": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NumResolucionPensionado": {
                    "type": "string"
                },
                "Vigencia": {
                    "type": "string"
                }
            }
        },
        "models.SupervisorContrato": {
            "title": "SupervisorContrato",
            "type": "object",
            "properties": {
                "Cargo": {
                    "type": "string"
                },
                "DependenciaSupervisor": {
                    "type": "string"
                },
                "DigitoVerificacion": {
                    "type": "integer",
                    "format": "int64"
                },
                "Documento": {
                    "type": "integer",
                    "format": "int64"
                },
                "Estado": {
                    "type": "boolean"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "SedeSupervisor": {
                    "type": "string"
                },
                "Tipo": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Sustituto": {
            "title": "Sustituto",
            "type": "object",
            "properties": {
                "Beneficiario": {
                    "$ref": "#/definitions/models.Beneficiario"
                },
                "Estado": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Porcentaje": {
                    "type": "integer",
                    "format": "int64"
                },
                "Tutor": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.TipoConceptoNomina": {
            "title": "TipoConceptoNomina",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.TipoContrato": {
            "title": "TipoContrato",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "TipoContrato": {
                    "type": "string"
                }
            }
        },
        "models.TipoNomina": {
            "title": "TipoNomina",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.TipoPension": {
            "title": "TipoPension",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "NombrePension": {
                    "type": "string"
                }
            }
        },
        "models.TipoPensionado": {
            "title": "TipoPensionado",
            "type": "object",
            "properties": {
                "DesTipoPensionado": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.TipoPreliquidacion": {
            "title": "TipoPreliquidacion",
            "type": "object",
            "properties": {
                "Activo": {
                    "type": "boolean"
                },
                "CodigoAbreviacion": {
                    "type": "string"
                },
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                },
                "NumeroOrden": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.Totales_x_preliq": {
            "title": "Totales_x_preliq",
            "type": "object",
            "properties": {
                "Alias_concepto": {
                    "type": "string"
                },
                "Id_concepto": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre_concepto": {
                    "type": "string"
                },
                "Total": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.TrConceptosNomPersona": {
            "title": "TrConceptosNomPersona",
            "type": "object",
            "properties": {
                "Conceptos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ConceptoNominaPorPersona"
                    }
                }
            }
        },
        "models.UnidadEjecutora": {
            "title": "UnidadEjecutora",
            "type": "object",
            "properties": {
                "Descripcion": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Nombre": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "docente_cargo",
            "description": "operations for DocenteCargo\n"
        },
        {
            "name": "funcionario_primatec",
            "description": "ConceptoController operations for Concepto\n"
        },
        {
            "name": "funcionario_proveedor",
            "description": "ConceptoController operations for Concepto\n"
        },
        {
            "name": "funcionario_cargo",
            "description": "ConceptoController operations for Concepto\n"
        },
        {
            "name": "parametro_estandar",
            "description": "ParametroEstandarController operations for ParametroEstandar\n"
        },
        {
            "name": "acta_inicio",
            "description": "ActaInicioController operations for ActaInicio\n"
        },
        {
            "name": "argo_ordenadores",
            "description": "ArgoOrdenadoresController operations for ArgoOrdenadores\n"
        },
        {
            "name": "relacion_parametro",
            "description": "RelacionParametroController operations for RelacionParametro\n"
        },
        {
            "name": "banco",
            "description": "BancoController operations for Banco\n"
        },
        {
            "name": "tipo_contrato",
            "description": "TipoContratoController operations for TipoContrato\n"
        },
        {
            "name": "departamento",
            "description": "DepartamentoController operations for Departamento\n"
        },
        {
            "name": "unidad_ejecutora",
            "description": "UnidadEjecutoraController operations for UnidadEjecutora\n"
        },
        {
            "name": "estado_civil",
            "description": "EstadoCivilController operations for EstadoCivil\n"
        },
        {
            "name": "porcentaje_prima_tecnica",
            "description": "PorcentajePrimaTecnicaController operations for PorcentajePrimaTecnica\n"
        },
        {
            "name": "informacion_pensionado",
            "description": "InformacionPensionadoController operations for InformacionPensionado\n"
        },
        {
            "name": "beneficiario",
            "description": "BeneficiarioController operations for Beneficiario\n"
        },
        {
            "name": "cargo",
            "description": "CargoController operations for Cargo\n"
        },
        {
            "name": "categoria_beneficiario",
            "description": "CategoriaBeneficiarioController operations for CategoriaBeneficiario\n"
        },
        {
            "name": "resolucion",
            "description": "ResolucionController operations for Resolucion\n"
        },
        {
            "name": "concepto_nomina_por_persona",
            "description": "ConceptoNominaPorPersonaController operations for ConceptoNominaPorPersona\n"
        },
        {
            "name": "nomina",
            "description": "NominaController operations for Nomina\n"
        },
        {
            "name": "concepto_nomina",
            "description": "ConceptoNominaController operations for ConceptoNomina\n"
        },
        {
            "name": "pais",
            "description": "PaisController operations for Pais\n"
        },
        {
            "name": "parametros",
            "description": "ParametrosController operations for Parametros\n"
        },
        {
            "name": "lugar_ejecucion",
            "description": "LugarEjecucionController operations for LugarEjecucion\n"
        },
        {
            "name": "ciudad",
            "description": "CiudadController operations for Ciudad\n"
        },
        {
            "name": "supervisor_contrato",
            "description": "SupervisorContratoController operations for SupervisorContrato\n"
        },
        {
            "name": "contrato_general",
            "description": "ContratoGeneralController operations for ContratoGeneral\n"
        },
        {
            "name": "informacion_proveedor",
            "description": "InformacionProveedorController operations for InformacionProveedor\n"
        },
        {
            "name": "unidad_ejecutora",
            "description": "UnidadEjecutoraController operations for UnidadEjecutora\n"
        },
        {
            "name": "tipo_pension",
            "description": "TipoPensionController operations for TipoPension\n"
        },
        {
            "name": "tipo_pensionado",
            "description": "TipoPensionadoController operations for TipoPensionado\n"
        },
        {
            "name": "preliquidacion",
            "description": "PreliquidacionController operations for Preliquidacion\n"
        },
        {
            "name": "estado_preliquidacion",
            "description": "EstadoPreliquidacionController operations for EstadoPreliquidacion\n"
        },
        {
            "name": "estado_disponibilidad",
            "description": "EstadoDisponibilidadController operations for EstadoDisponibilidad\n"
        },
        {
            "name": "estado_concepto_nomina",
            "description": "EstadoConceptoNominaController operations for EstadoConceptoNomina\n"
        },
        {
            "name": "tipo_nomina",
            "description": "TipoNominaController operations for TipoNomina\n"
        },
        {
            "name": "sustituto",
            "description": "SustitutoController operations for Sustituto\n"
        },
        {
            "name": "tipo_preliquidacion",
            "description": "TipoPreliquidacionController operations for TipoPreliquidacion\n"
        },
        {
            "name": "tipo_concepto_nomina",
            "description": "TipoConceptoNominaController operations for TipoConceptoNomina\n"
        },
        {
            "name": "detalle_preliquidacion",
            "description": "DetallePreliquidacionController operations for DetallePreliquidacion\n"
        },
        {
            "name": "naturaleza_concepto_nomina",
            "description": "NaturalezaConceptoNominaController operations for NaturalezaConceptoNomina\n"
        }
    ]
}